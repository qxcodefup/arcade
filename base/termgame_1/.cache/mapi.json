{
    "title": "@termgame_1: Modelo de jogo interativo no terminal",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@termgame_1: Modelo de jogo interativo no terminal</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Modelo de jogo interativo no terminal</h1>\n<ul>\n<li>Vamos criar um jogo interativo no terminal e utilizar as teclas para movimentar o personagem.</li>\n</ul>\n<p>V\u00eddeo de apresenta\u00e7\u00e3o do projeto</p>\n<p><a href=\"https://youtu.be/2IlDR6D6VVQ\"><img alt=\"caolho\" src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/termgame_1/caolho.png\" /></a></p>\n<h2>Instala\u00e7\u00e3o</h2>\n<ul>\n<li>Leia no arquivo <code>extra.md</code> de cada linguagem como executar a instala\u00e7\u00e3o e executar o projeto.</li>\n</ul>\n<h2>Sugest\u00e3o de exerc\u00edcios</h2>\n<ul>\n<li>Rode o projeto e veja o personagem se movimentando.</li>\n<li>Tente fazer o loop da tela, ou seja, se o personagem sair da tela pela direita, ele deve aparecer na esquerda e vice-versa. Caso saia pela parte de cima, ele deve aparecer na parte de baixo e vice-versa.</li>\n<li>Tente desenhar as bordas da tela.</li>\n<li>Tente fazer com que o personagem n\u00e3o possa sair da tela, ou seja, se ele tentar sair pela direita, ele deve ficar parado na borda direita e vice-versa.</li>\n<li>Tente fazer ele tamb\u00e9m se mover utilizando as teclas <code>W</code>, <code>A</code>, <code>S</code> e <code>D</code>.</li>\n<li>Tente criar um vetor de comidas, se a tecla <code>c</code> for pressionada, na posi\u00e7\u00e3o do personagem, deve ser criada uma comida.<ul>\n<li>Atualize estrutura do game para guardar um vetor de comidas.</li>\n<li>Atualize a fun\u00e7\u00e3o de inicializa\u00e7\u00e3o do jogo para criar um vetor de comidas vazio.</li>\n<li>Atualize a fun\u00e7\u00e3o draw para desenhar as comidas.</li>\n<li>Atualize a fun\u00e7\u00e3o de update para verificar se a tecla <code>c</code> foi pressionada e adicionar uma comida na posi\u00e7\u00e3o do personagem.</li>\n</ul>\n</li>\n<li>Ao \u00ednves de comidas, voc\u00ea pode criar um vetor de paredes.<ul>\n<li>Atualize estrutura do game para guardar um vetor de paredes.</li>\n<li>Atualize a fun\u00e7\u00e3o de inicializa\u00e7\u00e3o do jogo para criar um vetor de paredes em posi\u00e7\u00f5es aleat\u00f3rias.</li>\n<li>Atualize a fun\u00e7\u00e3o draw para desenhar as paredes.</li>\n<li>Na fun\u00e7\u00e3o de update, antes de andar, salve a posi\u00e7\u00e3o do personagem em uma vari\u00e1vel tempor\u00e1ria.</li>\n<li>Fa\u00e7a o personagem andar normalmente.</li>\n<li>Verifique se a nova posi\u00e7\u00e3o do personagem colide com alguma parede, se sim, volte para a posi\u00e7\u00e3o anterior.</li>\n</ul>\n</li>\n<li>Tente criar um vetor de armadilhas.<ul>\n<li>Atualize estrutura do game para guardar um vetor de armadilhas.</li>\n<li>Atualize a fun\u00e7\u00e3o de inicializa\u00e7\u00e3o do jogo para criar um vetor de armadilhas em posi\u00e7\u00f5es aleat\u00f3rias.</li>\n<li>Atualize a fun\u00e7\u00e3o draw para desenhar as armadilhas.</li>\n<li>Na fun\u00e7\u00e3o de update, verifique se o personagem colidiu com alguma armadilha e, se sim, finalize o jogo.</li>\n<li>Para finalizar o jogo, voc\u00ea pode adicionar uma vari\u00e1vel <code>gameOver</code> na estrutura do jogo e, se ela for verdadeira, n\u00e3o desenhar mais nada e finalizar o jogo.</li>\n<li>V\u00e1 no loop principal do jogo e verifique se o jogo acabou, se sim, quebre o loop para finalizar o jogo.</li>\n</ul>\n</li>\n</ul>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "type": "hide"
        }
    ],
    "draft": {
        "go": [
            {
                "name": "extra.md",
                "contents": "# Go\n\n## Instala\u00e7\u00e3o\n\n-Navegue pelo terminal at\u00e9 a pasta do projeto.\n\n```bash\n# voc\u00ea pode usar os comandos cd(mudar de pasta) e ls(para lista o conte\u00fado).\ncd fup/database/termgame_1\nls\n```\n\n- Voc\u00ea encontrar\u00e1 os arquivos `main.go` e `extra.md`.\n- Dentro dessa pasta, d\u00ea os seguintes comandos.\n\n```bash\n# Voc\u00ea precisar\u00e1 criar um projeto Go com o comando:\ngo mod init game\n# Instale a biblioteca `tcell` com o comando\ngo get github.com/gdamore/tcell/v2\n# Estando dentro da pasta do projeto, voc\u00ea pode rodar o projeto com o comando:\ntko run *.go\n```\n\n- Caso entre em loop infinito ou d\u00ea algum erro de execu\u00e7\u00e3o, voc\u00ea pode interromper o programa com `Ctrl + C`.\n- Caso seu terminal fique estranho, voc\u00ea pode tentar restaur\u00e1-lo com o comando `reset` ou digitando `Ctrl + D` pra matar o terminal.\n",
                "type": "show"
            },
            {
                "name": "main.go",
                "contents": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gdamore/tcell/v2\"\n)\n\ntype Elem struct {\n\tx, y    int\n\tsimbolo rune\n\tcor     tcell.Color\n}\n\ntype Game struct {\n\tjogador Elem\n\ttela    tcell.Screen\n}\n\n// Essa fun\u00e7\u00e3o roda apenas uma vez no in\u00edcio do jogo\nfunc (g *Game) Init() {\n\tg.jogador = Elem{x: 5, y: 5, simbolo: '@', cor: tcell.ColorRed}\n}\n\n// Essa fun\u00e7\u00e3o \u00e9 respons\u00e1vel por desenhar o jogo na tela\nfunc (g *Game) Draw() {\n\tg.tela.Clear() // Limpa a tela antes de desenhar\n\n\tg.PlotElem(g.jogador)\n\n\tg.tela.Show() // Atualiza a tela para mostrar as mudan\u00e7as\n}\n\n// Essa fun\u00e7\u00e3o \u00e9 executada quando o usu\u00e1rio pressiona uma tecla\n// Ela deve atualizar todas as vari\u00e1veis do jogo a cada intera\u00e7\u00e3o\nfunc (g *Game) Update(ek *tcell.EventKey) {\n\tswitch ek.Key() {\n\tcase tcell.KeyUp:\n\t\tg.jogador.y -= 1\n\tcase tcell.KeyRight:\n\t\tg.jogador.x += 1\n\tcase tcell.KeyDown:\n\t\tg.jogador.y += 1\n\tcase tcell.KeyLeft:\n\t\tg.jogador.x -= 1\n\tdefault:\n\t\tletra := ek.Rune()\n\t\tif letra != 0 {\n\t\t\tg.jogador.simbolo = letra\n\t\t}\n\t}\n}\n\n// ---------------------------------------------------------------------------\n// ----- Voc\u00ea n\u00e3o precisa alterar nada abaixo desta linha --------------------\n// ---------------------------------------------------------------------------\n\nfunc (g *Game) Plot(x int, y int, simbolo rune, cor tcell.Color) {\n\testilo := tcell.StyleDefault.Foreground(cor).Background(tcell.ColorBlack)\n\tg.tela.SetContent(x, y, simbolo, nil, estilo)\n}\n\nfunc (g *Game) PlotElem(elem Elem) {\n\tg.Plot(elem.x, elem.y, elem.simbolo, elem.cor)\n}\n\nfunc main() {\n\tgame := NewGame()      // Cria a tela\n\tgame.Init()            // Inicializa as variaveis do jogo\n\tgame.Draw()            // Desenha o jogo na tela\n\tgame.MainLoop()        // Inicia o loop principal do jogo\n\tdefer game.tela.Fini() // Encerra a tela ao sair\n}\n\nfunc (g *Game) MainLoop() {\n\tfor {\n\t\tev := g.tela.PollEvent()\n\t\tswitch ev := ev.(type) {\n\t\tcase *tcell.EventKey:\n\t\t\tswitch ev.Key() {\n\t\t\tcase tcell.KeyEsc, tcell.KeyCtrlC:\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tg.Update(ev)\n\t\t\t}\n\t\t\tg.Draw()\n\t\tcase *tcell.EventResize:\n\t\t\tg.tela.Sync()\n\t\t\tg.Draw()\n\t\t}\n\t}\n}\n\nfunc NewGame() *Game {\n\tg := &Game{}\n\tscreen, err := tcell.NewScreen()\n\tif err != nil {\n\t\tfmt.Printf(\"erro ao criar a tela: %v\", err)\n\t}\n\tif err := screen.Init(); err != nil {\n\t\tfmt.Printf(\"erro ao iniciar a tela: %v\", err)\n\t}\n\tg.tela = screen\n\tg.tela.Clear()\n\treturn g\n}\n",
                "type": "show"
            }
        ]
    }
}
