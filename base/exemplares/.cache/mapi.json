{
    "title": "@exemplares: Arca quantos exemplares",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@exemplares: Arca quantos exemplares</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Arca quantos exemplares</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/exemplares/cover.jpg\" /></p>\n<h2>Contexto</h2>\n<p>O dono do zoologico quer a lista de todas as esp\u00e9cies de animais  que existem no zoologico. Para isso ele te deu uma lista de todos os animais. Ele quer que voc\u00ea fa\u00e7a um programa que retorne uma nova lista contendo apenas um animal de cada especie. Considere que um n\u00famero representa uma especie. Devolva um novo vetor, sem n\u00fameros repetidos e ordenado.</p>\n<h2>Estrat\u00e9gia</h2>\n<ul>\n<li>Usando vetores</li>\n</ul>\n<div class=\"language-text highlight\"><pre><span></span><code>vetor = crie um vetor para representar os animais \u00fanicos\npara cada animal lido:\n    se o animal n\u00e3o estiver no vetor\n        adicione o animal no vetor\nordene o vetor\nimprima o resultado\n</code></pre></div>\n<ul>\n<li>Usando Conjuntos ou Dicion\u00e1rios</li>\n</ul>\n<div class=\"language-text highlight\"><pre><span></span><code>unicos = crie um dict ou set para representar os animais \u00fanicos\npara cada animal lido:\n    se o animal n\u00e3o estiver em unicos\n        adicione o animal em unicos\ngere um vetor de unicos\nordene o vetor\nimprima o resultado\n</code></pre></div>\n<h3>Entrada</h3>\n<ul>\n<li>linha 1: Um n\u00famero inteiro <strong>'N\"</strong> com a quantidade de elementos do vetor.</li>\n<li>linha 2: O vetor de N inteiros representando as esp\u00e9cies dos animais.</li>\n</ul>\n<h3>Sa\u00edda</h3>\n<ul>\n<li>O novo vetor ordenado contendo um exemplar de cada elemento.</li>\n</ul>\n<h3>Restri\u00e7\u00f5es</h3>\n<ul>\n<li>N\u00e3o utilize fun\u00e7\u00f5es de ordena\u00e7\u00e3o prontas.</li>\n</ul>\n<h2>Testes</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"mi\">3</span>\n<span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"mi\">1</span> <span class=\"mi\">2</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"mi\">5</span>\n<span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"mi\">8</span>\n<span class=\"mi\">1</span> <span class=\"mi\">9</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">9</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n3\n1 1 2\n======== EXPECT\n1 2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n1 3 2 2 3\n======== EXPECT\n1 2 3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n8\n1 9 3 3 3 2 1 4\n======== EXPECT\n1 2 3 4 9\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n5\n3 5 2 2 2\n======== EXPECT\n2 3 5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05\n7\n1 3 5 5 3 1 1\n======== EXPECT\n1 3 5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06\n6\n9 8 7 6 6 9\n======== EXPECT\n6 7 8 9\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
