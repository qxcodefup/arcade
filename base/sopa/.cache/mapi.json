{
    "title": "@sopa: Sopa de coelho",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@sopa: Sopa de coelho</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Sopa de coelho</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/sopa/cover.jpg\" /></p>\n<h2>Motiva\u00e7\u00e3o</h2>\n<p>Z\u00e9 da Carro\u00e7a comprou um casal de coelhos. Ele gosta muito de sopa de coelho. Muito mesmo. S\u00f3 tem uma coisa maior em Z\u00e9 da Carro\u00e7a do que a vontade de tomar sopa de coelho. \u00c9 o sonho de ser um Cuniculturista vendendo carne de coelho para todo sert\u00e3o central. Ele ainda est\u00e1 decidindo se come o casal de coelhos na sopa de hoje ou espera at\u00e9 que eles procriem o suficiente pra que Marivaldo fique rico.</p>\n<p>Estudando um pouco ele descobriu uma regra interessante criado por Leonardo de Pisa no ano de 1200.</p>\n<p>1. No primeiro m\u00eas nasce somente um casal;\n2. Casais amadurecem sexualmente ap\u00f3s o segundo m\u00eas de vida;\n3. N\u00e3o h\u00e1 problemas gen\u00e9ticos no cruzamento consangu\u00edneo;\n4. Todos os meses, cada casal d\u00e1 \u00e0 luz a um novo casal;</p>\n<p><img alt=\"Sopa\" src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/sopa/sopa.jpg\" /></p>\n<p>Por incr\u00edvel que pare\u00e7a, essas regras geram a seguinte sucess\u00e3o de n\u00fameros: 1, 1, 2, 3, 5, 8, 13, ...</p>\n<p>Leonardo de Pisa tamb\u00e9m \u00e9 conhecido como Fibonacci. Se quiser entender melhor como se chega na sequ\u00eancia veja : https://brasilescola.uol.com.br/matematica/sequencia-fibonacci.htm</p>\n<p>Dado o n\u00famero N, imprima o en\u00e9simo termo da s\u00e9rie.</p>\n<p>Sugest\u00e3o: N\u00e3o use recurs\u00e3o. Observe que o resultado n\u00e3o cabe em um inteiro, se estiver programando em c, use um long int.</p>\n<h3>Etapas</h3>\n<ul>\n<li>Com vetores:<ul>\n<li>Crie um vetor com dois elementos {1, 1}</li>\n<li>Fa\u00e7a um la\u00e7o preenchendo o vetor somando sempre a soma dos dois \u00faltimos at\u00e9 chegar no termo desejado.</li>\n</ul>\n</li>\n<li>Com recurs\u00e3o:<ul>\n<li>Implemente recursivo fazendo que o elemento fib(n) seja a soma de fib(n-1) + fib(n-2)</li>\n</ul>\n</li>\n<li>Com recurs\u00e3o e dicion\u00e1rios:<ul>\n<li>Crie um dicion\u00e1rio para guardar os valores j\u00e1 calculados e evitar recalcular.</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-go highlight\"><pre><span></span><code><span class=\"kd\">func</span><span class=\"w\"> </span><span class=\"nx\">fib</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">cache</span><span class=\"w\"> </span><span class=\"nx\">dict</span><span class=\"p\">[</span><span class=\"kt\">int</span><span class=\"p\">]</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">se</span><span class=\"w\"> </span><span class=\"nx\">valor</span><span class=\"w\"> </span><span class=\"nx\">ja</span><span class=\"w\"> </span><span class=\"nx\">estiver</span><span class=\"w\"> </span><span class=\"nx\">no</span><span class=\"w\"> </span><span class=\"nx\">cache</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">pegue</span><span class=\"o\">-</span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"w\"> </span><span class=\"nx\">retorne</span>\n<span class=\"w\">    </span><span class=\"nx\">se</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nx\">ou</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">retorne</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">valor</span><span class=\"w\"> </span><span class=\"nx\">padr\u00e3o</span>\n<span class=\"w\">    </span><span class=\"nx\">calcule</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">valor</span><span class=\"w\"> </span><span class=\"nx\">usando</span><span class=\"w\"> </span><span class=\"nx\">recursao</span>\n<span class=\"w\">    </span><span class=\"nx\">guarde</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">valor</span><span class=\"w\"> </span><span class=\"nx\">no</span><span class=\"w\"> </span><span class=\"nx\">cache</span>\n<span class=\"w\">    </span><span class=\"nx\">retorne</span><span class=\"w\"> </span><span class=\"nx\">o</span><span class=\"w\"> </span><span class=\"nx\">valor</span>\n<span class=\"p\">}</span>\n\n<span class=\"s\">``</span>\n\n<span class=\"err\">###</span><span class=\"w\"> </span><span class=\"nx\">Entrada</span>\n\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">um</span><span class=\"w\"> </span><span class=\"nx\">por</span><span class=\"w\"> </span><span class=\"nx\">linha</span><span class=\"p\">.</span>\n\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nx\">Sa\u00edda</span>\n\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">O</span><span class=\"w\"> </span><span class=\"nx\">en\u00e9simo</span><span class=\"w\"> </span><span class=\"nx\">termo</span><span class=\"w\"> </span><span class=\"nx\">de</span><span class=\"w\"> </span><span class=\"nx\">Fibonacci</span><span class=\"p\">.</span>\n\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nx\">Restri\u00e7\u00f5es</span>\n\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"err\">\u2264</span><span class=\"w\"> </span><span class=\"nx\">X</span><span class=\"w\"> </span><span class=\"err\">\u2264</span><span class=\"w\"> </span><span class=\"mi\">50</span>\n\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nx\">Exemplos</span>\n\n<span class=\"s\">``</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"nx\">py</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"nx\">INSERT</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">========</span><span class=\"w\"> </span><span class=\"nx\">EXPECT</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><span class=\"w\"> </span><span class=\"nx\">FINISH</span>\n</code></pre></div>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"mi\">6</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"mi\">8</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"mi\">50</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"mi\">12586269025</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n1\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n6\n======== EXPECT\n8\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n50\n======== EXPECT\n12586269025\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n2\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05\n9\n======== EXPECT\n34\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06\n17\n======== EXPECT\n1597\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07\n25\n======== EXPECT\n75025\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 08\n33\n======== EXPECT\n3524578\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 09\n41\n======== EXPECT\n165580141\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 10\n49\n======== EXPECT\n7778742049\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
